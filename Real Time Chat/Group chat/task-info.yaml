type: edu
files:
- name: resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: src/chat/Main.java
  visible: true
  text: |
    package chat;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/ChatTests.java
  visible: false
  text: |-
    import com.microsoft.playwright.*;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.junit.After;
    import org.junit.Before;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.regex.Pattern;
    import java.util.stream.Stream;

    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class ChatTests extends SpringTest {
        final static Random random = new Random();
        final static Pattern overflowPattern = Pattern.compile("^(auto|scroll)$");
        final static int TIMEOUT = 10_000;
        final static int NUM_OF_MESSAGES = 7;
        final static String URL = "http://localhost:28852";
        final static String TITLE = "Chat";

        final static String INPUT_MSG_ID_SELECTOR = "#input-msg";
        final static String SEND_MSG_BTN_ID_SELECTOR = "#send-msg-btn";
        final static String MESSAGES_ID_SELECTOR = "#messages";
        final static String MESSAGE_CLASS_SELECTOR = ".message";
        final static String INCORRECT_OR_MISSING_TITLE_TAG_ERR = "tag \"title\" should have correct text";

        final static String[] RANDOM_MESSAGES = Stream
                .generate(ChatTests::generateRandomMessage)
                .limit(NUM_OF_MESSAGES)
                .toArray(String[]::new);

        final static List<String> sentMessages = new ArrayList<>();

        Playwright playwright;
        Browser browser;
        List<Page> pages = new ArrayList<>();

        @Before
        public void initBrowser() {
            playwright = Playwright.create();

            browser = playwright.firefox().launch(
                    new BrowserType
                            .LaunchOptions()
                            .setHeadless(false)
    //                        .setSlowMo(15)
                            .setTimeout(1000 * 120));
        }

        @After
        public void closeBrowser() {
            if (playwright != null) {
                playwright.close();
            }
        }

        // Helper functions
        static Page openNewPage(String url, Browser browser, int defaultTimeout) {
            Page page = browser.newContext().newPage();
            page.navigate(url);
            page.setDefaultTimeout(defaultTimeout);
            return page;
        }

        static String generateRandomMessage() {
            return "Test message " + random.nextInt();
        }

        // Tests

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                () -> {
                    pages.add(openNewPage(URL, browser, TIMEOUT));
                    return correct();
                },
                () -> testShouldContainProperTitle(pages.get(0), TITLE),
                () -> {
                    pages.add(openNewPage(URL, browser, TIMEOUT));
                    return correct();
                },
                () -> testShouldContainProperTitle(pages.get(1), TITLE),

                // --- TESTS WITH TWO USERS
                // message 0
                () -> testFillInputField(pages.get(0), RANDOM_MESSAGES[0], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessages.add(RANDOM_MESSAGES[0]);
                    return testPressBtn(pages.get(0), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessages),
                // message 1
                () -> testFillInputField(pages.get(1), RANDOM_MESSAGES[1], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessages.add(RANDOM_MESSAGES[1]);
                    return testPressBtn(pages.get(1), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessages),
                // message 2
                () -> testFillInputField(pages.get(0), RANDOM_MESSAGES[2], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessages.add(RANDOM_MESSAGES[2]);
                    return testPressBtn(pages.get(0), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessages),
                // message 3
                () -> testFillInputField(pages.get(1), RANDOM_MESSAGES[3], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessages.add(RANDOM_MESSAGES[3]);
                    return testPressBtn(pages.get(1), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessages),
                // message 4
                () -> testFillInputField(pages.get(0), RANDOM_MESSAGES[4], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessages.add(RANDOM_MESSAGES[4]);
                    return testPressBtn(pages.get(0), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessages),

                // --- TESTS WITH THREE USERS
                () -> {
                    pages.add(openNewPage(URL, browser, TIMEOUT));
                    return correct();
                },

                // message 5
                () -> testFillInputField(pages.get(2), RANDOM_MESSAGES[5], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessages.add(RANDOM_MESSAGES[5]);
                    return testPressBtn(pages.get(2), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(2), sentMessages.subList(sentMessages.size() - 1, sentMessages.size())),

                // message 6
                () -> testFillInputField(pages.get(2), RANDOM_MESSAGES[6], INPUT_MSG_ID_SELECTOR),
                () -> {
                    sentMessages.add(RANDOM_MESSAGES[6]);
                    return testPressBtn(pages.get(2), SEND_MSG_BTN_ID_SELECTOR);
                },
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(0), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(1), sentMessages),
                () -> testUserMessagesShouldHaveProperStructureAndContent(pages.get(2), sentMessages.subList(sentMessages.size() - 2, sentMessages.size())),
        };

        CheckResult testShouldContainProperTitle(Page page, String title) {
            return title.equals(page.title()) ? correct() : wrong(INCORRECT_OR_MISSING_TITLE_TAG_ERR);
        }

        CheckResult testFillInputField(Page page, String msg, String inputFieldSelector) {
            try {
                assertThat(page.locator(inputFieldSelector)).isEmpty();
                page.fill(inputFieldSelector, msg);
                return correct();
            } catch (PlaywrightException | AssertionError e) {
                return wrong(e.getMessage());
            }
        }

        CheckResult testPressBtn(Page page, String btnSelector) {
            try {
                page.click(btnSelector);
                return correct();
            } catch (PlaywrightException e) {
                return wrong(e.getMessage());
            }
        }

        CheckResult testUserMessagesShouldHaveProperStructureAndContent(Page page, List<String> sentMessages) {
            Locator allMessagesLocator = page.locator(MESSAGES_ID_SELECTOR).locator(MESSAGE_CLASS_SELECTOR);

            try {
                assertThat(page.locator(MESSAGES_ID_SELECTOR)).hasCSS("overflow-y", overflowPattern);
                assertThat(allMessagesLocator).hasCount(sentMessages.size());

                for (int i = 0; i < sentMessages.size(); i++) {
                    Locator messageLocator = allMessagesLocator.nth(i);

                    assertThat(messageLocator).isVisible();
                    assertThat(messageLocator).hasText(sentMessages.get(i));
                }

                return correct();
            } catch (AssertionError e) {
                return wrong(e.getMessage());
            }
        }
    }
  learner_created: false
- name: resources/static/styles.css
  visible: true
  text: |-
    .message {
        border-style: solid; /* it sets a border */
        border-color: brown; /* it sets the color of the border */
        margin: 20px;
    }

    #messages {
        overflow-y: auto;
    }
  learner_created: true
- name: resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Chat</title>
        <link rel="stylesheet" href="styles.css">

    </head>
    <body>
    <div id="messages">
    </div>
    <input id="input-msg">
    <button id="send-msg-btn">yoo</button>
    <script src="scripts.js"></script>
    </body>
    </html>
  learner_created: true
- name: resources/static/scripts.js
  visible: true
  text: |-
    let input = document.getElementById("input-msg")
    let send = document.getElementById("send-msg-btn")
    let container = document.getElementById("messages")


    send.addEventListener("click", (e) => {
        if (input.value === "") return
        let message = document.createElement("div");
        console.log(input.value);
        message.classList.add("message");
        message.textContent = input.value;
        container.appendChild(message);
        message.scrollIntoView({behavior: "smooth"});
        input.value = "";
    });
  learner_created: true
- name: src/chat/Message.java
  visible: true
  text: |
    package chat;

    public class Message {
        private String message;

        public Message() {

        }

        public Message(String m) {
            this.message = m;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }
  learner_created: true
- name: src/chat/MessageController.java
  visible: true
  text: |
    package chat;

    import org.springframework.messaging.handler.annotation.MessageMapping;
    import org.springframework.messaging.handler.annotation.SendTo;
    import org.springframework.stereotype.Controller;

    @Controller
    public class MessageController {

        @MessageMapping("/hello")
        @SendTo("/topic/greetings")
        public Message recieveMessage(Message message) {
            message.setMessage(message.getMessage());
            return message;
        }

    }
  learner_created: true
- name: src/chat/WebSocketConfig.java
  visible: true
  text: |
    package chat;

    import org.springframework.context.annotation.Configuration;
    import org.springframework.messaging.simp.config.MessageBrokerRegistry;
    import org.springframework.web.socket.config.annotation.EnableWebSocket;
    import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
    import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
    import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

    @Configuration
    @EnableWebSocketMessageBroker
    public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
        @Override
        public void configureMessageBroker(MessageBrokerRegistry config) {
            config.enableSimpleBroker("/topic");
            config.setApplicationDestinationPrefixes("/app");
        }

        @Override
        public void registerStompEndpoints(StompEndpointRegistry registry) {
            registry.addEndpoint("/gs-guide-websocket").withSockJS();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/24560#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 18 Jan 2023 18:32:00 UTC"
record: 3
